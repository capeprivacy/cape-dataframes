
syntax = "proto3";

package cape;

option go_package = ".;proto";

import "google/protobuf/timestamp.proto";

service DataConnector {
  rpc Query(QueryRequest) returns (stream Record);
  rpc Schema(SchemaRequest) returns (SchemaResponse);
  rpc Version(VersionRequest) returns (VersionResponse);
}

message QueryRequest {
  string data_source = 1; // Label of the data source weâ€™re targeting
  string query = 2;
  int64 limit = 3;
  int64 offset = 4;
}

message Record {
  // Schema is only available on the first message
  Schema schema = 1;

  // Each field value goes over the wire and the number of values maps to the number of fields in the Schema.
  repeated Field fields = 2;
}

enum RecordType {
  DOCUMENT = 0;
}

message Field {
  oneof value {
    int32 int32 = 1;
    int64 int64 = 2;
    google.protobuf.Timestamp timestamp = 3;
    float float = 4;
    double double = 5;
    string string = 6;
    bytes bytes = 7;
    bool bool = 8;
  }
}

// Schema contains information
message Schema {
  string data_source = 1; // label of data source data is being returned from
  string target = 2; // the target of the schema (e.g. a postgres table)
  RecordType type = 3;
  repeated FieldInfo fields = 4;
}

message SchemaRequest {
  string data_source = 1;
}

// Returned when you request database schema
message SchemaResponse {
  repeated Schema schemas = 1;
}

// FieldInfo represents all information about a field including its type, the number of bits or bytes, and the fields name.
message FieldInfo {
  FieldType field = 1;
  int64 size = 2;
  string name = 3;
}

// We need to know the exact field type so the client can convert the data into the appropriate field type.
enum FieldType {
  BIGINT = 0;
  INT = 1;
  SMALLINT = 2;
  BOOL = 3;
  BYTEA = 4;
  CHAR = 5;
  VARCHAR = 6;
  TEXT = 7;
  DOUBLE = 8;
  REAL = 9;
  TIMESTAMP = 10;
}

message VersionRequest{};

message VersionResponse{
  string version = 1;
  string build_date = 2;
}
